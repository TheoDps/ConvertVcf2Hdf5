/*
 * -------------------------------------------------
 *  nf-core/imputation Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

    withName: FilterSamples {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: RenameFiles {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: FixVariantNames {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: FilterVariants {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: MakeIndAndProbe {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: ChunkVcf {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: CalculateDosage {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: FixChunkSize {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: ConvertGenotypeToHdf5 {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: TabixFilteredVcfInput {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: CalculateSnpQcMetrics {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: CompressSnpQcFile {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

    withName: OutputVcf {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }


}