/*
 * -------------------------------------------------
 *  eQTLGen/ConvertVcf2Hdf5 Nextflow lsf config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

executor {
    name = 'lsf'
    queueSize = 400
    submitRateLimit = 1
}

process {
  executor = 'lsf'
   cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

    withName: CountSamples {
        memory = { check_max( 1.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 5.minute }
  }

    withName: RemoveInfoField {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
  }

    withName: MakeIndAndProbe {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = {  1.hour + 1.minute / 5 * NumberOfSamples }
  }

    withName: ChunkVcf {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 400 * NumberOfSamples }
  }

    withName: FixChunkSize {
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        cpus = 4
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
  }

    withName: ConvertGenotypeToHdf5 {
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 10.min * task.attempt, 'time' ) }
  }

    withName: TabixFilteredVcfInput {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 100 * NumberOfSamples }
  }

    withName: CalculateSnpQcMetrics {
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
  }

    withName: CompressSnpQcFile {
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour }
  }

    withName: OutputVcf {
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 1.h * task.attempt, 'time' ) }
  }
}
