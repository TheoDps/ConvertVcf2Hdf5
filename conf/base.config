/*
 * -------------------------------------------------
 *  nf-core/imputation Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

    withName: FilterSamples {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
        clusterOptions = '--job-name=FilterSamples'
  }

    withName: RenameFiles {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
        clusterOptions = '--job-name=RenameFiles'
  }

    withName: FixVariantNames {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
        clusterOptions = '--job-name=FixVariantNames'
  }

    withName: FilterVariants {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
        clusterOptions = '--job-name=FilterVariants'
  }

    withName: MakeIndAndProbe {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = {  1.hour + 1.minute / 5 * NumberOfSamples }
        clusterOptions = '--job-name=MakeIndAndProbe'
  }

    withName: ChunkVcf {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 100 * NumberOfSamples }
        clusterOptions = '--job-name=ChunkVcf'
  }

    withName: CalculateDosage {
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 45min }
        clusterOptions = '--job-name=CalculateDosage'
  }

    withName: FixChunkSize {
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        cpus = 4
        time = { 1.hour + 1.minute / 5 * NumberOfSamples ) }
        clusterOptions = '--job-name=FixChunkSize'
  }

    withName: ConvertGenotypeToHdf5 {
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 10.min * task.attempt, 'time' ) }
        clusterOptions = '--job-name=ConvertGenotypeToHdf5'
  }

    withName: TabixFilteredVcfInput {
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 100 * NumberOfSamples }
        clusterOptions = '--job-name=TabixFilteredVcfInput'
  }

    withName: CalculateSnpQcMetrics {
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour + 1.minute / 5 * NumberOfSamples }
        clusterOptions = '--job-name=CalculateSnpQcMetrics'
  }

    withName: CompressSnpQcFile {
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { 1.hour }
        clusterOptions = '--job-name=CompressSnpQcFile'
  }

    withName: OutputVcf {
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        cpus = 1
        time = { check_max( 1.h * task.attempt, 'time' ) }
        clusterOptions = '--job-name=OutputVcf'
  }

}